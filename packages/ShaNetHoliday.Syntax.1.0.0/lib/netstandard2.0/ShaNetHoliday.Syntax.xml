<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShaNetHoliday.Syntax</name>
    </assembly>
    <members>
        <member name="T:ShaNetHoliday.Syntax.ChineseElement">
            <summary>
            Enumération pour les éléments du calendrier Chinois.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseElement.Wood">
            <summary>
            Bois.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseElement.Fire">
            <summary>
            Feu.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseElement.Earth">
            <summary>
            Terre.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseElement.Metal">
            <summary>
            Métal.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseElement.Water">
            <summary>
            Eau.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.ChineseZodiac">
            <summary>
            Enumérations pour les animaux du calendrier Chinois.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Rat">
            <summary>
            Rat.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Ox">
            <summary>
            Boeuf.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Tiger">
            <summary>
            tigre.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Rabbit">
            <summary>
            Lapin.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Dragon">
            <summary>
            Dragon.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Snake">
            <summary>
            Serpent.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Horse">
            <summary>
            Cheval.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Shepp">
            <summary>
            Mouton.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Monkey">
            <summary>
            Singe.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Rooster">
            <summary>
            Coq.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Dog">
            <summary>
            Chien.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.ChineseZodiac.Pig">
            <summary>
            Cochon.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.After">
            <summary>
            Elément de syntax pour indiquer que c'est après une date précise.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.After.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.After.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.After"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Date.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.After.ThenStartAt(System.String)">
            <summary>
            Elément de syntax pour changer l'heure.
            </summary>
            <param name="value">Nouvelle heure.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.ThenStart"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.After.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.After.In(ShaNetHoliday.Syntax.YearType)">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
            <param name="year">Type de l'année.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.AfterMovable">
            <summary>
            Elément de syntax pour définir la date après laquelle le jour sera trouvé.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.AfterMovable.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.AfterMovable.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.AfterMovable.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.AfterMovable"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.AndChineseZodiac">
            <summary>
            Elément de syntax pour définir l'animal.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.AndChineseZodiac.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.AndChineseZodiac.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.ChineseZodiac)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.AndChineseZodiac"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Animal du Zodiac Chinois.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.AndChineseZodiac.If(System.DayOfWeek)">
            <summary>
            Elément de syntax pour déplacer le jour à un autre si il tombe un certain jour.
            </summary>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.IfDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Before">
            <summary>
            Elément de syntax pour indiquer que c'est avant une date précise.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Before.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Before.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Before"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Date.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Before.ThenStartAt(System.String)">
            <summary>
            Elément de syntax pour changer l'heure.
            </summary>
            <param name="value">Nouvelle heure.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.ThenStart"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Before.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Before.In(ShaNetHoliday.Syntax.YearType)">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
            <param name="year">Type de l'année.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.BeforeMovable">
            <summary>
            Elément de syntax pour définir la date avant laquelle le jour sera trouvé.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.BeforeMovable.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.BeforeMovable.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.BeforeMovable.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.BeforeMovable"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Catholic">
            <summary>
            Elément d'expression <see cref="T:ShaNetHoliday.Syntax.Composition.Catholic"/>.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Catholic.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Catholic.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Catholic"/>.
            </summary>
            <param name="parent">Elément parent.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Chinese">
            <summary>
            Racine pour les expressions chinoises.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Chinese.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Chinese.#ctor">
            <summary>
            Initialise une nouvelle instance pour la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Chinese"/>.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Chinese.LunarDate(System.String)">
            <summary>
            Elément de syntax pour définir une date lunaire.
            </summary>
            <param name="value">Définition d'un jour dans un mois lunaire.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.LunarDate"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Chinese.SolarDate(ShaNetDate.SolarTerm)">
            <summary>
            Elément de syntax pour définir une date solaire.
            </summary>
            <param name="value">Terme solaire.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.SolarDate"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Christianism">
            <summary>
            Elément d'expression <see cref="T:ShaNetHoliday.Syntax.Composition.Christianism"/>.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.CarnivalMonday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.CarnivalMonday"/> 48 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.CarnivalTuesday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.CarnivalTuesday"/> 47 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.AshWednesday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.AshWednesday"/> 46 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.PalmSunday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.PalmSunday"/> 7 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.MaundyThursday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.MaundyThursday"/> 3 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.GoodFriday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.GoodFriday"/> 2 jours avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.HolySaturday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.HolySaturday"/> 1 jour avant le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.Easter">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.Easter"/> le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.EasterMonday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.EasterMonday"/> 1 jour après le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.AscensionDay">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.AscensionDay"/> 39 jours après le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.Pentecost">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.Pentecost"/> 49 jours après le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.WhitMonday">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.WhitMonday"/> 50 jours après le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.CorpusChristi">
            <summary>
            Expression pour <see cref="P:ShaNetHoliday.Syntax.Composition.Christianism.CorpusChristi"/> 60 jours après le dimanche de Pâques.
            </summary>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Christianism.CustomDay(System.String)">
            <summary>
            Expression pour un <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> personalisé par rapport au dimanche de Pâques..
            </summary>
            <param name="value">Expression du jour particulier.</param>
            <returns>Le <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Christianism.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserEaster"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Christianism.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Christianism"/>.
            </summary>
            <param name="parent">Elément parent.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Date">
            <summary>
            Syntax pour la création d'une expression de date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Date.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Date.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Date"/>.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Date.Fix(System.DateTime)">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe quelle année.
            </summary>
            <param name="dateTime">Date.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Day"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Date.Specific(System.DateTime)">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans une année en particulier.
            </summary>
            <param name="dateTime">Date.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.SpecificDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Date.Catholic">
            <summary>
            Elément de syntax pour les dates calculées par rapport au dimanche de Pâques dans la religion catholique.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Catholic"/>.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Date.Orthodox">
            <summary>
            Elément de syntax pour les dates calculées par rapport au dimanche de Pâques dans la religion othodoxe.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Orthodox"/>.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Date.Movable(ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Elément de syntax pour changer au jour de la semaine spécifié.
            </summary>
            <param name="count">Nombre d'apparition.</param>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Move"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Date.MovableFromMovable(ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Elément de syntax pour changer au jour de la semaine spécifié à partir d'une date fixe déjà changée.
            </summary>
            <param name="count">Nombre d'apparition.</param>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Move"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Day">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe quelle année.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserDate"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Day.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DateTime)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Day"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dateTime">Date.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Day.StartAt(System.String)">
            <summary>
            Elément de syntax pour indiquer l'heure de début.
            </summary>
            <param name="value">L'heure de début au format HH:mm</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.StartAtNoon">
            <summary>
            Elément de syntax pour indiquer que l'heure de début est midi.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.StartAt1PM">
            <summary>
            Elément de syntax pour indiquer que l'heure de début est 13h.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.StartAt2PM">
            <summary>
            Elément de syntax pour indiquer que l'heure de début est 14h.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.StartAtMidnight">
            <summary>
            Elément de syntax pour indiquer que l'heure de début est minuit.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Day.Since(System.Int32)">
            <summary>
            Elément de syntax pour gérer le début d'application de l'expression.
            </summary>
            <param name="year">Année de départ.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Day.Over">
            <summary>
            Elément de syntax pour affecter le calendrier à utiliser pour interpréter la date.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Over"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Duration">
            <summary>
            Elément de syntax pour gérer la durée.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Duration.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.P5D">
            <summary>
            Indique que la durée est de 5 jours.
            </summary>
            <returns>L'élément <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.P4D">
            <summary>
            Indique que la durée est de 5 jours.
            </summary>
            <returns>L'élément <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.P3D">
            <summary>
            Indique que la durée est de 5 jours.
            </summary>
            <returns>L'élément <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.P2D">
            <summary>
            Indique que la durée est de 5 jours.
            </summary>
            <returns>L'élément <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.Spec(System.String)">
            <summary>
            Indique que la durée est personalisée.
            </summary>
            <param name="value">Durée.</param>
            <returns>L'élément <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.In(ShaNetHoliday.Syntax.YearType)">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
            <param name="year">Type de l'année.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Duration.If(System.DayOfWeek)">
            <summary>
            Elément de syntax pour changer l'heure de début selon le jour.
            </summary>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.If"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Duration.Over">
            <summary>
            Elément de syntax pour gérer le calendrier à utiliser pour interpréter la date.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Over"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.EasterDay">
            <summary>
            Elément de syntax pour la définition d'un jour en rapport avec le dimanche de Pâques.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.EasterDay.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.EasterDay.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle classe de <see cref="T:ShaNetHoliday.Syntax.Composition.EasterDay"/>.
            </summary>
            <param name="parent"></param>
            <param name="value"></param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.EasterDay.StartAt(System.String)">
            <summary>
            Elément de syntax pour indiquer l'heure de début.
            </summary>
            <param name="value">L'heure de début au format HH:mm</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.EasterDay.StartAtMidnight">
            <summary>
            Elément de syntax pour indiquer que l'heure de début est à minuit.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Every">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de périodes.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Every.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Every.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="number">Nombre de périodes.</param>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Every.Year">
            <summary>
            Elément de syntax pour le récurrence par nombre d'années.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.If">
            <summary>
            Elément de syntax pour changer l'heure de début selon le jour.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.If.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.If.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.If"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.If.ThenStartAt(System.String)">
            <summary>
            Elément de syntax pour changer l'heure.
            </summary>
            <param name="value">Nouvelle heure.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.ThenStart"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.If.ThenStartAtMidnight">
            <summary>
            Elément de syntax pour changer l'heure à minuit.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.ThenStart"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.IfDay">
            <summary>
            Elément de syntax pour déplacer le jour à un autre si il tombe un certain jour.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.IfDay.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.IfDay.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.IfDay"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.IfDay.Then">
            <summary>
            Elément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.ThenAction"/> pour choisir l'action à réaliser.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.InYear">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.InYear.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.InYear.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.YearType)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="year">Type de l'année.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.InYear.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de périodes.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.LunarDate">
            <summary>
            Elément de syntax pour définir une date lunaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.LunarDate.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.LunarDate.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserChineseLunar"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.LunarDate.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.LunarDate"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Définition d'un jour dans un mois.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.LunarDate.OnCycle(System.Int32)">
            <summary>
            Elément de syntax pour définir un cycle.
            </summary>
            <param name="value">Cycle.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.OnChineseCycle"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.LunarDate.If(System.DayOfWeek)">
            <summary>
            Elément de syntax pour déplacer le jour à un autre si il tombe un certain jour.
            </summary>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.IfDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Movable">
            <summary>
            Elément de syntax pour changer au jour de la semaine spécifié.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Movable.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Movable.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserMovable"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Movable.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Movable"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Movable.Before(System.String)">
            <summary>
            Elément de syntax pour indiquer que c'est avant une date précise.
            </summary>
            <param name="value">Date avant laquelle le jour doit se trouver.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Before"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Movable.Before(ShaNetHoliday.Syntax.Month)">
            <summary>
            Elément de syntax pour indiquer que c'est avant le début du mois.
            </summary>
            <param name="month">Mois avant lequel le jour doit se trouver.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Before"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Movable.After(System.String)">
            <summary>
            Elément de syntax pour indiquer que c'est après une date précise.
            </summary>
            <param name="value">Date après laquelle le jour doit se trouver.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.After"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Movable.In(ShaNetHoliday.Syntax.Month)">
            <summary>
            Elément de syntax pour indiquer que c'est ap^rès le début du mois.
            </summary>
            <param name="month">Mois à partir duquel le jour doit se trouver.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.After"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.MovableFromMovable">
            <summary>
            Elément de syntax pour changer au jour de la semaine spécifié à partir d'une date fixe déjà changée.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.MovableFromMovable.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.MovableFromMovable.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.MovableFromMovable.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.MovableFromMovable"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.MovableFromMovable.Before(ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Elément de syntax pour définir la date avant laquelle le jour sera trouvé.
            </summary>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.BeforeMovable"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.MovableFromMovable.After(ShaNetHoliday.Syntax.Count,System.DayOfWeek)">
            <summary>
            Elément de syntax pour définir la date après laquelle le jour sera trouvé.
            </summary>
            <param name="count">Adjectif numéral pour la position du jour.</param>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.BeforeMovable"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Move">
            <summary>
            Syntax pour la création d'une expression de déplacement de date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Move.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Move.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserMove"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Move.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Move"/>.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Move.Fix(System.DateTime)">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe qu'elle année.
            </summary>
            <param name="dateTime">Date.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.SimpleDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Next">
            <summary>
            Elément de syntax qui permet de déplacer la date au jour particulier juste après.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Next.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Next.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Next"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Next.Or">
            <summary>
            Elément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Or"/> qui permet de chaîner les tests de jours.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Next.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Next.Since(System.Int32)">
            <summary>
            Elément de syntax pour gérer le début d'application de l'expression.
            </summary>
            <param name="year">Année de départ.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Next.Over">
            <summary>
            Elément de syntax pour gérer le calendrier à utiliser pour interpréter la date.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Over"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Observe">
            <summary>
            Syntax pour la création d'une expression d'observation de date supplémentaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Observe.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Observe.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserObserve"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Observe.#ctor">
            <summary>
            Intialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Observe"/>.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Observe.Fix(System.DateTime)">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe qu'elle année.
            </summary>
            <param name="dateTime">Date.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.SimpleDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.OfChineseElement">
            <summary>
            Elément de syntax pour définir l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.OfChineseElement.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.OfChineseElement.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetHoliday.Syntax.ChineseElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.OfChineseElement"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Elément Chinois.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.OfChineseElement.And(ShaNetHoliday.Syntax.ChineseZodiac)">
            <summary>
            Elément de syntax pour définir l'animal.
            </summary>
            <param name="zodiac">Animal du Zodiac Chinois.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.AndChineseZodiac"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.OnChineseCycle">
            <summary>
            Elément de syntax pour définir un cycle.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.OnChineseCycle.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.OnChineseCycle.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.OnChineseCycle"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Cycle.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.OnChineseCycle.Of(ShaNetHoliday.Syntax.ChineseElement)">
            <summary>
            Elément de syntax pour définir l'élément.
            </summary>
            <param name="element">Elément Chinois.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.OfChineseElement"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Or">
            <summary>
            Elément de syntax qui permet de chaîner les tests de jours.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Or.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Or.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Or"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Or.If(System.DayOfWeek)">
            <summary>
            Elément de syntax pour déplacer le jour à un autre si il tombe un certain jour.
            </summary>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.IfDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Orthodox">
            <summary>
            Elément de syntax pour les jours en rapport avec le dimanche de Pâques dans la religion orthodoxe.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Orthodox.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Orthodox.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initilialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Orthodox"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Over">
            <summary>
            Elément de syntax pour gérer le calendrier à utiliser pour interpréter la date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Over.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Over.Gregorian">
            <summary>
            Affecte le calendrier <see cref="T:System.Globalization.GregorianCalendar"/> à cette expression.
            </summary>
            <returns>L'expression.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Over.Julian">
            <summary>
            Affecte le calendrier <see cref="T:System.Globalization.JulianCalendar"/> à cette expression.
            </summary>
            <returns>L'expression.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Over.Hijri">
            <summary>
            Affecte le calendrier <see cref="T:System.Globalization.HijriCalendar"/> à cette expression.
            </summary>
            <returns>L'expression.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Over.Hebrew">
            <summary>
            Affecte le calendrier <see cref="T:System.Globalization.HebrewCalendar"/> à cette expression.
            </summary>
            <returns>L'expression.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Over.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance pour la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Over"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Previous">
            <summary>
            Elément de syntax qui permet de déplacer la date au jour particulier juste avant.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Previous.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Previous.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DayOfWeek)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Previous"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dayOfWeek">Jour particulier.</param>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Previous.Or">
            <summary>
            Elément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Or"/> qui permet de chaîner les tests de jours.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Previous.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Previous.Since(System.Int32)">
            <summary>
            Elément de syntax pour gérer le début d'application de l'expression.
            </summary>
            <param name="year">Année de départ.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.SimpleDay">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe qu'elle année.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.SimpleDay.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SimpleDay.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DateTime)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.SimpleDay"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dateTime">Date.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SimpleDay.If(System.DayOfWeek)">
            <summary>
            Elément de syntax pour déplacer le jour à un autre si il tombe un certain jour.
            </summary>
            <param name="dayOfWeek">Jour particulier.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.IfDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Since">
            <summary>
            Elément de syntax pour gérer le début d'application de l'expression.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Since.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Since.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="year">Année de départ.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Since.To(System.Int32)">
            <summary>
            Elément de syntax pour gérer la fin d'application de l'expression.
            </summary>
            <param name="year">Année de fin.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.To"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.SolarDate">
            <summary>
            Elément de syntax pour définir une date solaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.SolarDate.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.SolarDate.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserChineseSolar"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SolarDate.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,ShaNetDate.SolarTerm)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.LunarDate"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Terme solaire.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SolarDate.The(System.Int32)">
            <summary>
            Elément de syntax pour définir le jour d'un mois solaire.
            </summary>
            <param name="value">Numéro du jour dans le mois solaire.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.The"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SolarDate.OnCycle(System.Int32)">
            <summary>
            Elément de syntax pour définir un cycle.
            </summary>
            <param name="value">Cycle.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.OnChineseCycle"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.SpecificDay">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans une année en particulier.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.SpecificDay.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.SpecificDay.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserDate"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SpecificDay.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.DateTime)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.SpecificDay"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="dateTime">Date.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.SpecificDay.StartAt(System.String)">
            <summary>
            Elément de syntax pour indiquer l'heure de début.
            </summary>
            <param name="value">L'heure de début au format HH:mm</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Start">
            <summary>
            Elément de syntax pour indiquer l'heure de début.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Start.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Start.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Start"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Heure de début au format HH:mm</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Start.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Start.In(ShaNetHoliday.Syntax.YearType)">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
            <param name="year">Type de l'année.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Start.UntilMidnight">
            <summary>
            Elément de syntax pour indiquer que la durée est de 1 jour.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Start.Duration">
            <summary>
            Elément de syntax pour gérer la durée.
            </summary>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Duration"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Substitute">
            <summary>
            Syntax pour la création d'une expression de substitution de date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Substitute.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Substitute.Parser">
            <summary>
            <see cref="T:ShaNetHoliday.Syntax.Parsers.ParserSubstitute"/> associé à l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Substitute.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Substitute"/>.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Substitute.Fix(System.DateTime)">
            <summary>
            Elément de syntax pour mettre en place une date fixe dans n'importe qu'elle année.
            </summary>
            <param name="dateTime">Date.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.SimpleDay"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.The">
            <summary>
            Elément de syntax pour définir le jour d'un mois solaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.The.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.The.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.OnChineseCycle"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Numéro du jour dans le mois solaire.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.ThenAction">
            <summary>
            Elément de syntax qui permet de choisir l'action à réaliser.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.ThenAction.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenAction.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.ThenAction"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenAction.Previous(System.DayOfWeek)">
            <summary>
            Elément de syntax qui permet de déplacer la date au jour particulier juste avant.
            </summary>
            <param name="dayOfWeek">Jour particulier à retourner.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Previous"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenAction.Next(System.DayOfWeek)">
            <summary>
            Elément de syntax qui permet de déplacer la date au jour particulier juste après.
            </summary>
            <param name="dayOfWeek">Jour particulier à retourner.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Next"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.ThenStart">
            <summary>
            Elément de syntax pour changer l'heure.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.ThenStart.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenStart.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.ThenStart"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="value">Heure de début.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenStart.Every(System.Int32)">
            <summary>
            Elément de syntax pour gérer la récurrence selon un nombre de période.
            </summary>
            <param name="number">Nombre de période.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Every"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.ThenStart.In(ShaNetHoliday.Syntax.YearType)">
            <summary>
            Elément de syntax pour gérer le type d'année pris en charge.
            </summary>
            <param name="year">Type de l'année.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.InYear"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.To">
            <summary>
            Elément de syntax pour gérer la fin d'application de l'expression.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.To.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.To.#ctor(ShaNetHoliday.Core.Models.ExpressionElement,System.Int32)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
            <param name="year">Année de fin.</param>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Composition.Year">
            <summary>
            Elément de syntax pour le récurrence par nombre d'années.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Composition.Year.Token">
            <summary>
            Token de l'élément.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Year.#ctor(ShaNetHoliday.Core.Models.ExpressionElement)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ShaNetHoliday.Syntax.Composition.Year"/>.
            </summary>
            <param name="parent">Elément de syntax parent.</param>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Year.Since(System.Int32)">
            <summary>
            Elément de syntax pour gérer le début d'application de l'expression.
            </summary>
            <param name="year">Année de départ.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.Since"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Composition.Year.To(System.Int32)">
            <summary>
            Elément de syntax pour gérer la fin d'application de l'expression.
            </summary>
            <param name="year">Année de fin.</param>
            <returns>L'élément de syntax <see cref="T:ShaNetHoliday.Syntax.Composition.To"/> pour ajouter d'autres comportements.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Count">
            <summary>
            Enumération pour l'adjectif numéral de position du jour.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.First">
            <summary>
            Le premier.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.Second">
            <summary>
            Le second.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.Third">
            <summary>
            Le troisième.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.Fourth">
            <summary>
            Le quatrième.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.Fifth">
            <summary>
            Le cinquième.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Count.Sixth">
            <summary>
            Le sixième.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.ExpressionTree">
            <summary>
            Racine de la syntax pour les expressions.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.ExpressionTree.Date">
            <summary>
            Racine pour les expressions de date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.ExpressionTree.Move">
            <summary>
            Racine pour les expressions de déplacement.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.ExpressionTree.Observe">
            <summary>
            Racine pour les expressions d'observation.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.ExpressionTree.Substitute">
            <summary>
            Racine pour les expressions de substitution.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.ExpressionTree.Chinese">
            <summary>
            Racine pour les expressions chinoises.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Month">
            <summary>
            Enumération pour les mois.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.January">
            <summary>
            Janvier.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.February">
            <summary>
            Février.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.March">
            <summary>
            Mars.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.April">
            <summary>
            Avril.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.May">
            <summary>
            Mai.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.June">
            <summary>
            Juin.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.July">
            <summary>
            Juillet.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.August">
            <summary>
            Août.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.September">
            <summary>
            Septembre.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.October">
            <summary>
            Octobre.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.November">
            <summary>
            Novembre.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.Month.December">
            <summary>
            Décembre.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.Parser">
            <summary>
            Classe de définition des patterns.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.Parser.GetCalendar(System.String)">
            <summary>
            Méthode qui permet de récupérer un <see cref="T:System.Globalization.Calendar"/> par rapport au type spécifié.
            </summary>
            <param name="calendar">Type du calendrier souhaité.</param>
            <returns>Le <see cref="T:System.Globalization.Calendar"/> correspondant.</returns>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternStartAndDuration">
            <summary>
            Pattern pour l'heure de début et la durée.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternStartHours">
            <summary>
            Pattern pour l'heure de début.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternIfDayThenStartAt">
            <summary>
            Pattern Si jour particulier alors autre heure de début.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternNewHours">
            <summary>
            Pattern pour la nouvelle heure de début.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternYearType">
            <summary>
            Pattern pour le type d'année.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternCalendar">
            <summary>
            Pattern pour le type de calendrier.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternYearRecurs">
            <summary>
            Pattern pour la récurrence.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternMonths">
            <summary>
            Pattern pour une date dans un mois.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternNumber">
            <summary>
            Pattern pour l'adjectif numéral.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternDay">
            <summary>
            Pattern pour le jour particulier.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternActionBeforeAfter">
            <summary>
            Pattern pour le type d'action Before/After.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternActionNextPrevious">
            <summary>
            Pattern pour le type d'action Previous/Next.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternCHL">
            <summary>
            Pattern pour la définition d'une date lunaire dans le calendrier Chinois.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternCHS">
            <summary>
            Pattern pour la définition d'une date solaire dans le calendrier Chinois.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternElement">
            <summary>
            Pattern pour la définition des éléments du calendrier Chinois.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternAnimal">
            <summary>
            Pattern pour la définition des animaux du calendrier Chinois.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.Parser.PatternCycleElementAnimal">
            <summary>
            Pattern pour la définition d'un cycle, d'un élément et d'un animal pour le calendrier Chinois.
            </summary>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserChineseLunar">
            <summary>
            Parser pour une expression lunaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserChineseLunar.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserChineseLunar.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserChineseLunar.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserChineseSolar">
            <summary>
            Parser pour une expression solaire.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserChineseSolar.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserChineseSolar.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserChineseSolar.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserDate">
            <summary>
            Parser pour une expression de type date.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserDate.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserDate.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserDate.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserEaster">
            <summary>
            Parser pour une expression de type religieuse.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserEaster.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserEaster.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserEaster.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserMovable">
            <summary>
            Parser pour une expression de type movable.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserMovable.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMovable.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMovable.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable">
            <summary>
            Parser pour une expression de type movable from movable.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMovableFromMovable.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserMove">
            <summary>
            Parser pour une expression de type déplacement.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserMove.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMove.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserMove.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserObserve">
            <summary>
            Parser pour une expression de type observation.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserObserve.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserObserve.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserObserve.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.Parsers.ParserSubstitute">
            <summary>
            Parser pour une expression de type substitution.
            </summary>
        </member>
        <member name="P:ShaNetHoliday.Syntax.Parsers.ParserSubstitute.Pattern">
            <summary>
            Pattern complet de ce parser.
            </summary>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserSubstitute.IsMatch(System.String)">
            <summary>
            Méthode qui permet de déterminer si une expression peut être interpréter par le parser.
            </summary>
            <param name="expression">Expression à tester.</param>
            <returns>
            <see langword="true"/> si l'expression match le pattern, <see langword="false"/> sinon.
            </returns>
        </member>
        <member name="M:ShaNetHoliday.Syntax.Parsers.ParserSubstitute.Parse(System.String,System.Int32)">
            <summary>
            Méthode de parsing d'une expression.
            </summary>
            <param name="expression">Expression à parser.</param>
            <param name="year">Année.</param>
            <returns>Un <see cref="T:ShaNetHoliday.Core.Parsers.ParserResult"/> correspondant.</returns>
        </member>
        <member name="T:ShaNetHoliday.Syntax.YearType">
            <summary>
            Enumération pour le type d'année.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.YearType.Even">
            <summary>
            Année pair.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.YearType.Odd">
            <summary>
            Année impair.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.YearType.Leap">
            <summary>
            Année bisextile.
            </summary>
        </member>
        <member name="F:ShaNetHoliday.Syntax.YearType.NonLeap">
            <summary>
            Année non bisextile.
            </summary>
        </member>
    </members>
</doc>
