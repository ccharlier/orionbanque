<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ID3iRegex</name>
    </assembly>
    <members>
        <member name="T:ID3iRegex.Pattern">
            <summary>
            Classe de syntax pour écrire un pattern d'expression régulière.
            </summary>
        </member>
        <member name="P:ID3iRegex.Pattern.With">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ID3iRegex.Pattern"/>.
            </summary>
            <returns>La nouvelle instance.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.ToString">
            <summary>
            Retourne une chaîne qui représente l'objet actuel.
            </summary>
            <returns>Chaîne qui représente l'objet actuel.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.RegEx(System.String)">
            <summary>
            Méthode qui permet d'inclure une expression régulière déjà faite.
            </summary>
            <param name="regex">Expression régulière.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.Include(ID3iRegex.Pattern)">
            <summary>
            Inclue un pattern dans le pattern courant.
            </summary>
            <param name="pattern">Pattern à inclure.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Newline">
            <summary>
            \n Matches a newline character
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.CarriageReturn">
            <summary>
            \r Matches a carriage return character, unicode character 2185.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Tab">
            <summary>
            \t Matches a tab character.Historically, tab stops happen every 8 characters.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.NullCharacter">
            <summary>
            \0 Matches a null character, most often visually represented in unicode using U+2400.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.StartOfLine">
            <summary>
            ^ Matches the start of a string without consuming any characters.If multiline mode is used, this will also match immediately after a newline character.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.EndOfLine">
            <summary>
            $ Matches the end of a string without consuming any characters.If multiline mode is used, this will also match immediately before a newline character.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.WordBoundary">
            <summary>
            \b Matches, without consuming any characters, immediately between a character matched by \w and a character not matched by \w(in either order). It cannot be used to separate non words from words.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.NonWordBoundary">
            <summary>
            \B Matches, without consuming any characters, at the position between two characters matched by \w.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Anything">
            <summary>
            . Matches any character other than newline(or including newline with the /s flag)
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Whitespace">
            <summary>
            \s Matches any space, tab or newline character.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.NonWhitespace">
            <summary>
            \S Matches anything other than a space, tab or newline.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Digit">
            <summary>
            \d Matches any decimal digit.Equivalent to[0 - 9].
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.NonDigit">
            <summary>
            \D Matches anything other than a decimal digit.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Word">
            <summary>
            \w Matches any letter, digit or underscore.Equivalent to[a - zA - Z0 - 9_].
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.NonWord">
            <summary>
            \W Matches anything other than a letter, digit or underscore.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.Set(ID3iRegex.Pattern)">
            <summary>
            [] Character classe notation.
            </summary>
            <param name="pattern">Char à inclure.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.NegatedSet(ID3iRegex.Pattern)">
            <summary>
            [^] Character classe notation with negation.
            </summary>
            <param name="pattern">Car à exclure.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.Literal(System.String)">
            <summary>
            Custom string.
            </summary>
            <param name="literal">Chaîne à inclure.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Letter">
            <summary>
            a-zA-Z Matches any characters between a-z or A-Z.You can combine as much as you please.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.LowercaseLetter">
            <summary>
            a-z Matches any characters between a and z, including a and z.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.UppercaseLetter">
            <summary>
            A-Z Matches any characters between a and z, including a and z.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.Choice(ID3iRegex.Pattern,ID3iRegex.Pattern,ID3iRegex.Pattern[])">
            <summary>
            a|b Matches the a or the b part of the subexpression.
            </summary>
            <param name="first">Premier choix.</param>
            <param name="second">Second choix.</param>
            <param name="choices">Autres choix.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.Group(ID3iRegex.Pattern)">
            <summary>
            (...) Parts of the regex enclosed in parentheses may be referred to later in the expression or extracted from the results of a successful match.
            </summary>
            <param name="pattern">Pattern à rajouter au groupe.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.AtomicGroup(ID3iRegex.Pattern)">
            <summary>
            (?>...) Matches the longest possible substring in the group and doesn't allow later backtracking to reevaluate the group. It is not a capturing group.
            </summary>
            <param name="pattern">Pattern à rajouter au groupe.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Pattern.NamedGroup(System.String,ID3iRegex.Pattern)">
            <summary>
            (?'name'...) This capturing group can be referred to using the given name instead of a number.
            </summary>
            <param name="name">Nom du groupe.</param>
            <param name="pattern">Pattern à rajouter au groupe.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Pattern.Repeat">
            <summary>
            Quantifiers access.
            </summary>
            <returns>Une nouvelle instance pour gérer les quantités.</returns>
        </member>
        <member name="T:ID3iRegex.Repeat">
            <summary>
            Classe de syntax pour gérer les quantités.
            </summary>
        </member>
        <member name="M:ID3iRegex.Repeat.#ctor(ID3iRegex.Pattern)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:ID3iRegex.Repeat"/>.
            </summary>
            <param name="parentPattern"></param>
        </member>
        <member name="P:ID3iRegex.Repeat.Optional">
            <summary>
            a? Matches an `a` character or nothing.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Repeat.ZeroOrMore">
            <summary>
            a* Matches zero or more consecutive `a` characters.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="P:ID3iRegex.Repeat.OneOrMore">
            <summary>
            a+ Matches one or more consecutive `a` characters.
            </summary>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Repeat.Exactly(System.Int32)">
            <summary>
            a{3} Matches exactly 3 consecutive `a` characters.
            </summary>
            <param name="number">Exactement ce nombre.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Repeat.AtLeast(System.Int32)">
            <summary>
            a{3,} Matches at least 3 consecutive `a` characters.
            </summary>
            <param name="x">Au moins ce nombre.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Repeat.AtMost(System.Int32)">
            <summary>
            a{, 3} Matches at most 3 consecutive `a`characters.
            </summary>
            <param name="x">Au plus ce nombre.</param>
            <returns>Le pattern courant.</returns>
        </member>
        <member name="M:ID3iRegex.Repeat.Between(System.Int32,System.Int32)">
            <summary>
            a{3,6} Matches between 3 and 6 (inclusive) consecutive `a` characters.
            </summary>
            <param name="min">Au minimum ce nombre.</param>
            <param name="max">Au maximum ce nombre.</param>
            <returns>Le pattern courant.</returns>
        </member>
    </members>
</doc>
